#!/usr/bin/env python

from __future__ import print_function

import sys
from yujin_tools import make_isolated_main

if __name__ == '__main__':
    try:
        sys.exit(make_isolated_main())
    except Exception as e:
        sys.exit(str(e))

##!/usr/bin/env python
#
#from __future__ import print_function
#import argparse
#import os
#
#from yujin_make.builder import build_workspace_isolated, colorize_line, extract_cmake_and_make_arguments
#
#
#def extract_cmake_args(args=sys.argv[1:]):
#    # extract -D* and -G* arguments
#    cmake_args = [a for a in args if a.startswith('-D') or a.startswith('-G')]
#    args = [a for a in args if a not in cmake_args]
#
#    return cmake_args, args
#
#
#def handle_cmake_args(cmake_args, opts):
#    # Process cmake arugments
#    for arg in list(cmake_args):
#        if arg.startswith('-DCMAKE_INSTALL_PREFIX='):
#            if opts.install_space is None:
#                opts.install_space = arg.split('=', 1)[-1]
#            else:
#                print(colorize_line(
#                    "Warning: both the cmake argument '" + str(arg) + "' " +
#                    "and the --install-space argument have been used, " +
#                    "using the --install-space argument."
#                ))
#            cmake_args.remove(arg)
#        elif arg.startswith('-DCATKIN_DEVEL_PREFIX='):
#            if opts.devel is None:
#                opts.devel = arg.split('=', 1)[-1]
#            else:
#                print(colorize_line(
#                    "Warning: both the cmake argument '" + str(arg) + "' " +
#                    "and the --devel-space argument have been used, " +
#                    "using the --devel-space argument."
#                ))
#            cmake_args.remove(arg)
#    return cmake_args, opts
#
#
#def main():
#    print("This is experimental!")
#    cmake_args, opts = handle_cmake_args(opts.cmake_args, opts)
#
#    build_workspace_isolated(
#        workspace=opts.workspace or '.',
#        sourcespace=opts.source,
#        buildspace=opts.build,
#        develspace=opts.devel,
#        installspace=opts.install_space,
#        merge=opts.merge,
#        install=opts.install,
#        jobs=opts.jobs,
#        force_cmake=opts.force_cmake,
#        colorize=not opts.no_color,
#        build_packages=opts.packages,
#        quiet=opts.quiet,
#        cmake_args=cmake_args,
#        make_args=opts.make_args
#    )
#
#if __name__ == '__main__':
#    main()
